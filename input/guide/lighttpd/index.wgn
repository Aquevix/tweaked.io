Title: lighttpd speedup &amp; optimization guide
menu: menu
show_advert: 1
comments:lighttpd
----

lighttpd
========

[lighttpd](http://www.lighttpd.net/) (pronounced "__lighty__") is a fast, secure and flexible webserver.  The build-in module system allows it be extended as much as the more mature Apache server, and its featureset is pretty complete right out of the box.


Compression
-----------

Like most other web-servers `lighttpd` supports the use of gzip-compression.

Enabling compression generally involves a making trade-off between using
CPU to perform the compression, versus just sending more traffic out to
the network, however `lighttpd` does allow you to work around this problem
by caching the compressed content on-disk.

Compressing the content on-disk means that multiple requests for a
compressible document do __not__ need to burn CPU-cycles repeatedly
compressing the same document.

The only caveat to this behaviour is that you need to both specify __and__
create the cache-directory.  The following is a reasonable example:

<pre class="code">

server.modules              = (
                                # Your modules here ..
                                "mod_compress",
                                # Your modules here ..
                              )


#### compress module
compress.allowed-encodings = ("gzip", "deflate")
compress.filetype          = ("text/plain", "text/html", "text/javascript", "text/css", "text/xml" )

# You must create this directory.
compress.cache-dir         = "/srv/tweaked.io/cache"


</pre>


Client Caching
--------------

A simple way of avoiding your server handling requests is if remote
clients believe their content is already up-to-date.

To do this you want to set suitable cache-friendly headers, and a simple
way of doing that is to declare that all images, etc, are fixed for a given
period of time.

To do this load `mod_access`, and define patterns:

<pre class="code">

server.modules  = (
                     # Put mod_access first.
                     "mod_access",
                     # Your modules here ..
                  )

# Cache based on suffix
$HTTP["url"] =~ "\.(jpg|gif|png|css|js)$" {
     expire.url = ( "" =&gt; "access plus 2 months" )
}

# Cache based on path
expire.url = ( "/fonts/" =&gt; "access plus 2 months",
               "/i/"     =&gt; "access plus 2 months",
               "/media/" =&gt; "access plus 2 months",
             )
</pre>



Tuning for PHP
--------------

Lighttpd supports the use of PHP via FPM:

<pre>
server.modules += ( "mod_fastcgi" )

index-file.names += ( "index.php" )

fastcgi.server = (
    ".php" => (
      "localhost" => (
        "socket" => "/var/run/php5-fpm.sock",
        "broken-scriptfilename" => "enable"
      ))
)
</pre>

Notice that this uses a Unix domain-socket to connect to FPM, so you need to ensure that you change `/etc/php5/fpm/pool.d/www.conf` to read:

<pre class="code">
listen = /var/run/php5-fpm.sock
</pre>

This ensures that FPM will listen on a domain socket, rather than the default of listening on a network-socket (the default is "`listen=127.0.0.1:9000`").

By default PHP-FPM will start a number of dedicated workers, each running an instance of PHP.  If you're not swamped for memory you can increase the number of workers to increase concurrent-throughput.

Edit the file `/etc/php5/fpm/pool.d/www.conf` to change the number of children:

<pre class="code">
; set a fixed number of php workers
pm = static

; start up 12 php processes
pm.max_children = 12
</pre>

This is an example setting, of the kind we mention in the [considerations](/benchmarking/considerations/) section - the value of 12 is just an example, which you will need to test under-load to see if it is reasonable for _your_ particular setup.


General Webserver Notes
-----------------------

We also have a page of [general notes for webservers](/guide/general/webservers/).
